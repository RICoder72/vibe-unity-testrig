#!/bin/bash

# Unity Vibe CLI - Unified Command Interface
# Usage: vibe-unity <command> [options]
# 
# Commands:
#   create-scene    Create a new Unity scene
#   list-types      List available scene types  
#   add-canvas      Add canvas to current scene
#   help            Show detailed help
#
# Global Options:
#   --help, -h      Show help for command
#   --version, -v   Show version information

VERSION="1.0.0"

# Check if Unity executable exists
UNITY_PATH=""
if command -v /mnt/c/Program\ Files/Unity/Hub/Editor/*/Editor/Unity.exe >/dev/null 2>&1; then
    UNITY_PATH=$(find /mnt/c/Program\ Files/Unity/Hub/Editor/*/Editor/Unity.exe | head -1)
elif command -v unity >/dev/null 2>&1; then
    UNITY_PATH="unity"
else
    echo "Error: Unity Editor not found. Please ensure Unity is installed and accessible."
    exit 1
fi

# Convert WSL path to Windows path for Unity
get_project_path() {
    if [[ $(pwd) == /mnt/c/* ]]; then
        echo $(pwd | sed 's|/mnt/c|C:|')
    else
        echo $(pwd)
    fi
}

# Create JSON batch file for create-scene command and queue it via file watcher
create_scene_batch_file() {
    local scene_name="$1"
    local scene_path="$2"
    local scene_type="${3:-DefaultGameObjects}"
    local add_to_build="${4:-false}"
    
    # Create .vibe-commands directory if it doesn't exist
    local command_dir=".vibe-commands"
    mkdir -p "$command_dir"
    
    # Generate unique filename with timestamp
    local timestamp=$(date +%Y%m%d-%H%M%S-%N)
    local batch_file="$command_dir/create-scene-$timestamp.json"
    
    # Create JSON batch file
    cat > "$batch_file" << EOF
{
  "version": "1.0",
  "description": "Auto-generated: Create scene $scene_name",
  "commands": [
    {
      "action": "create-scene",
      "name": "$scene_name",
      "path": "$scene_path",
      "type": "$scene_type",
      "addToBuild": $add_to_build
    }
  ]
}
EOF
    
    echo "üìÅ Generated batch file: $(basename "$batch_file")"
    echo "üîç Unity will automatically process this file via file watcher"
    echo "üí° Check Unity Console for execution status"
    
    return 0
}

# Create JSON batch file for add-canvas command and queue it via file watcher
create_canvas_batch_file() {
    local canvas_name="$1"
    local scene_name="$2"
    local render_mode="${3:-ScreenSpaceOverlay}"
    local width="${4:-1920}"
    local height="${5:-1080}"
    local scale_mode="${6:-ScaleWithScreenSize}"
    
    # Create .vibe-commands directory if it doesn't exist
    local command_dir=".vibe-commands"
    mkdir -p "$command_dir"
    
    # Generate unique filename with timestamp
    local timestamp=$(date +%Y%m%d-%H%M%S-%N)
    local batch_file="$command_dir/add-canvas-$timestamp.json"
    
    # Create JSON batch file
    cat > "$batch_file" << EOF
{
  "version": "1.0",
  "description": "Auto-generated: Add canvas $canvas_name",
  "commands": [
    {
      "action": "add-canvas",
      "name": "$canvas_name",
      "scene": "$scene_name",
      "renderMode": "$render_mode",
      "referenceWidth": $width,
      "referenceHeight": $height,
      "scaleMode": "$scale_mode"
    }
  ]
}
EOF
    
    echo "üìÅ Generated batch file: $(basename "$batch_file")"
    echo "üîç Unity will automatically process this file via file watcher"
    echo "üí° Check Unity Console for execution status"
    
    return 0
}

# Execute Unity command via HTTP server
execute_via_http() {
    local method="$1"
    shift
    local args=("$@")
    
    # Convert Unity method to HTTP action
    local action=""
    local params="{}"
    
    case "$method" in
        "UnityVibe.Editor.CLI.CreateSceneFromCommandLine")
            action="create-scene"
            params=$(cat <<EOF
{
  "name": "${args[0]}",
  "path": "${args[1]}",
  "type": "${args[2]:-DefaultGameObjects}",
  "addToBuild": ${args[3]:-false}
}
EOF
)
            ;;
        "UnityVibe.Editor.CLI.AddCanvasFromCommandLine")
            action="add-canvas"
            params=$(cat <<EOF
{
  "name": "${args[0]}",
  "renderMode": "${args[1]:-ScreenSpaceOverlay}"
}
EOF
)
            ;;
        *)
            echo "‚ö†Ô∏è  Method not supported via HTTP: $method"
            return 1
            ;;
    esac
    
    # Create request JSON
    local request_json=$(cat <<EOF
{
  "action": "$action",
  "parameters": $params
}
EOF
)
    
    # Send HTTP request
    local response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$request_json" \
        http://localhost:9876/execute 2>/dev/null)
    
    if [[ $? -eq 0 ]] && [[ -n "$response" ]]; then
        # Parse response
        local success=$(echo "$response" | grep -o '"success":[^,}]*' | cut -d: -f2)
        local result=$(echo "$response" | grep -o '"result":"[^"]*"' | cut -d'"' -f4)
        
        if [[ "$success" == "true" ]]; then
            echo "‚úÖ $result"
            return 0
        else
            echo "‚ùå $result"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  Failed to communicate with Unity HTTP server"
        return 1
    fi
}

# Session management functions
SESSION_FILE=".vibeunity"

# Create or update session file
write_session() {
    local key="$1"
    local value="$2"
    
    # Create session file if it doesn't exist
    if [[ ! -f "$SESSION_FILE" ]]; then
        echo "# Unity Vibe CLI Session" > "$SESSION_FILE"
        echo "# Created: $(date)" >> "$SESSION_FILE"
    fi
    
    # Remove existing key if present
    if grep -q "^$key=" "$SESSION_FILE" 2>/dev/null; then
        sed -i "/^$key=/d" "$SESSION_FILE"
    fi
    
    # Add new key-value pair
    echo "$key=$value" >> "$SESSION_FILE"
}

# Read value from session file
read_session() {
    local key="$1"
    local default="$2"
    
    if [[ -f "$SESSION_FILE" ]]; then
        local value=$(grep "^$key=" "$SESSION_FILE" 2>/dev/null | cut -d= -f2-)
        echo "${value:-$default}"
    else
        echo "$default"
    fi
}

# Check if session file exists
has_session() {
    [[ -f "$SESSION_FILE" ]]
}

# Clear session file
clear_session_file() {
    if [[ -f "$SESSION_FILE" ]]; then
        rm -f "$SESSION_FILE"
        echo "‚úÖ Session cleared"
    else
        echo "‚ÑπÔ∏è  No active session to clear"
    fi
}

# Execute Unity command with proper logging and error capture
execute_unity_command() {
    local method="$1"
    shift
    local args="$@"
    
    PROJECT_PATH=$(get_project_path)
    
    # Detect if Unity is running to choose appropriate execution method
    local unity_running=false
    
    # Check for Unity processes
    if command -v powershell.exe &> /dev/null; then
        local unity_processes=$(powershell.exe "Get-Process | Where-Object {\$_.ProcessName -like '*Unity*' -and \$_.ProcessName -notlike '*Unity Hub*' -and \$_.ProcessName -notlike '*Unity.Licensing*'} | Measure-Object | Select-Object -ExpandProperty Count" 2>/dev/null | tr -d '\r' || echo "0")
        if [[ "${unity_processes:-0}" -gt 0 ]]; then
            unity_running=true
        fi
    fi
    
    # Also check for Unity lock file
    if [[ -f "Temp/UnityLockfile" ]]; then
        unity_running=true
    fi
    
    if [[ "$unity_running" == "true" ]]; then
        echo "üîÑ Unity is running - using file watcher system"
        
        # Check if this is a supported command for automatic file watcher conversion
        case "$method" in
            "UnityVibe.Editor.CLI.CreateSceneFromCommandLine")
                # Convert create-scene command to JSON batch file
                create_scene_batch_file "$@"
                return $?
                ;;
            "UnityVibe.Editor.CLI.AddCanvasFromCommandLine")
                # Convert add-canvas command to JSON batch file
                create_canvas_batch_file "$@"
                return $?
                ;;
            *)
                echo "üí° Command '$method' not yet supported for automatic file watcher conversion"
                echo "   Supported commands: create-scene, add-canvas"
                echo "   Place JSON batch files in .vibe-commands/ directory manually"
                echo "   Unity will automatically process them via the file watcher"
                echo ""
                echo "üö´ Skipping command execution to avoid Unity instance conflicts"
                return 1
                ;;
        esac
    else
        echo "üîÑ Unity not running - executing in batch mode"
        
        # Use a temporary file to capture all output
        local temp_log=$(mktemp)
        
        # Execute Unity in batch mode
        "$UNITY_PATH" \
            -batchmode \
            -quit \
            -projectPath "$PROJECT_PATH" \
            -executeMethod "$method" \
            $args \
            -logFile "$temp_log" 2>&1
        
        local exit_code=$?
        
        # Process Unity logs
        if [[ -f "$temp_log" ]]; then
            grep -E "\[UnityCLI\]" "$temp_log" 2>/dev/null || true
            
            # If command failed, show additional error context
            if [[ $exit_code -ne 0 ]]; then
                echo ""
                echo "üîç Unity Error Details:"
                echo "======================="
                # Show errors and exceptions
                grep -E "(Exception|Error|Failed|Cannot|Unable)" "$temp_log" | head -10 || echo "No specific error details found"
                echo ""
                echo "üí° Full Unity log saved to: $temp_log"
                echo "   Use 'cat $temp_log' to view complete output"
            else
                # Clean up temp file on success
                rm -f "$temp_log"
            fi
        fi
        
        return $exit_code
    fi
}

# Show version information
show_version() {
    echo "Unity Vibe CLI v$VERSION"
    echo "A command-line interface for Unity development workflow automation"
}

# Show general help
show_help() {
    echo "Unity Vibe CLI - Unified Command Interface"
    echo ""
    echo "USAGE:"
    echo "    vibe-unity <COMMAND> [OPTIONS]"
    echo ""
    echo "COMMANDS:"
    echo "    create-scene    Create a new Unity scene"
    echo "    list-types      List available scene types"
    echo "    add-canvas      Add canvas to current scene"
    echo "    add-panel       Add UI panel to scene"
    echo "    add-button      Add UI button to scene"
    echo "    add-text        Add UI text element to scene"
    echo "    start-session   Start a new session with default parameters"
    echo "    show-session    Show current session parameters"
    echo "    set-parent      Update the default parent in current session"
    echo "    clear-session   Clear current session"
    echo "    check-unity     Check Unity process status"  
    echo "    kill-unity      Kill Unity processes (use with caution)"
    echo "    help            Show detailed help information"
    echo ""
    echo "GLOBAL OPTIONS:"
    echo "    -h, --help      Show help for command"
    echo "    -v, --version   Show version information"
    echo ""
    echo "EXAMPLES:"
    echo "    vibe-unity create-scene MyScene Assets/Scenes"
    echo "    vibe-unity create-scene GameScene Assets/Scenes/Game --type DefaultGameObjects --build"
    echo "    vibe-unity list-types"
    echo "    vibe-unity add-canvas MainCanvas --mode ScreenSpaceOverlay"
    echo "    vibe-unity add-panel MenuPanel --parent MainCanvas --width 300 --height 400"
    echo "    vibe-unity add-button PlayButton --parent MenuPanel --text \"Play Game\""
    echo "    vibe-unity add-text HeaderText --parent MenuPanel --text \"Welcome!\" --size 24"
    echo "    vibe-unity check-unity"
    echo "    vibe-unity help create-scene"
    echo ""
    echo "For detailed help on a specific command:"
    echo "    vibe-unity help <COMMAND>"
    echo "    vibe-unity <COMMAND> --help"
}

# Show help for create-scene command
show_create_scene_help() {
    echo "Create a new Unity scene"
    echo ""
    echo "USAGE:"
    echo "    vibe-unity create-scene <SCENE_NAME> <SCENE_PATH> [OPTIONS]"
    echo ""
    echo "ARGUMENTS:"
    echo "    <SCENE_NAME>    Name of the scene to create"
    echo "    <SCENE_PATH>    Directory path where scene will be created"
    echo ""
    echo "OPTIONS:"
    echo "    -t, --type <TYPE>       Scene type (default: DefaultGameObjects)"
    echo "    -b, --build             Add scene to build settings"
    echo "    -h, --help              Show this help message"
    echo ""
    echo "SCENE TYPES:"
    echo "    Empty               Completely empty scene"
    echo "    DefaultGameObjects  Scene with Main Camera and Directional Light"
    echo "    2D                  2D optimized scene setup"
    echo "    3D                  3D optimized scene setup"
    echo "    URP                 Universal Render Pipeline optimized"
    echo ""
    echo "EXAMPLES:"
    echo "    vibe-unity create-scene MyScene Assets/Scenes"
    echo "    vibe-unity create-scene GameScene Assets/Scenes/Game --type 3D --build"
    echo "    vibe-unity create-scene UIScene Assets/Scenes/UI -t 2D"
}

# Show help for add-panel command
show_add_panel_help() {
    echo "Add UI panel to the currently active Unity scene"
    echo ""
    echo "USAGE:"
    echo "    vibe-unity add-panel <PANEL_NAME> [OPTIONS]"
    echo ""
    echo "ARGUMENTS:"
    echo "    <PANEL_NAME>    Name for the panel GameObject"
    echo ""
    echo "OPTIONS:"
    echo "    -p, --parent <PARENT>   Parent GameObject name (default: auto-detect canvas)"
    echo "    -s, --scene <SCENE>     Target scene name (default: current scene)"
    echo "    -w, --width <WIDTH>     Panel width (default: 200)"
    echo "    --height <HEIGHT>       Panel height (default: 200)"
    echo "    -a, --anchor <ANCHOR>   Anchor preset (default: MiddleCenter)"
    echo "    --use-session           Use session defaults for unspecified parameters"
    echo "    --help                  Show this help message"
    echo ""
    echo "ANCHOR PRESETS:"
    echo "    TopLeft, TopCenter, TopRight"
    echo "    MiddleLeft, MiddleCenter, MiddleRight"
    echo "    BottomLeft, BottomCenter, BottomRight"
    echo ""
    echo "EXAMPLES:"
    echo "    vibe-unity add-panel MenuPanel"
    echo "    vibe-unity add-panel MenuPanel --scene GameScene --parent MainCanvas --width 300 --height 400"
    echo "    vibe-unity add-panel SidePanel -s GameScene -p MainCanvas -w 150 --anchor TopLeft"
}

# Show help for add-button command
show_add_button_help() {
    echo "Add UI button to the currently active Unity scene"
    echo ""
    echo "USAGE:"
    echo "    vibe-unity add-button <BUTTON_NAME> [OPTIONS]"
    echo ""
    echo "ARGUMENTS:"
    echo "    <BUTTON_NAME>   Name for the button GameObject"
    echo ""
    echo "OPTIONS:"
    echo "    -p, --parent <PARENT>   Parent GameObject name (default: auto-detect canvas)"
    echo "    -t, --text <TEXT>       Button text (default: \"Button\")"
    echo "    -w, --width <WIDTH>     Button width (default: 160)"
    echo "    --height <HEIGHT>       Button height (default: 30)"
    echo "    -a, --anchor <ANCHOR>   Anchor preset (default: MiddleCenter)"
    echo "    --help                  Show this help message"
    echo ""
    echo "ANCHOR PRESETS:"
    echo "    TopLeft, TopCenter, TopRight"
    echo "    MiddleLeft, MiddleCenter, MiddleRight"
    echo "    BottomLeft, BottomCenter, BottomRight"
    echo ""
    echo "EXAMPLES:"
    echo "    vibe-unity add-button PlayButton"
    echo "    vibe-unity add-button PlayButton --parent MenuPanel --text \"Play Game\""
    echo "    vibe-unity add-button ExitButton -p MenuPanel -t \"Exit\" --anchor BottomCenter"
}

# Show help for add-text command
show_add_text_help() {
    echo "Add UI text element to the currently active Unity scene"
    echo ""
    echo "USAGE:"
    echo "    vibe-unity add-text <TEXT_NAME> [OPTIONS]"
    echo ""
    echo "ARGUMENTS:"
    echo "    <TEXT_NAME>     Name for the text GameObject"
    echo ""
    echo "OPTIONS:"
    echo "    -p, --parent <PARENT>   Parent GameObject name (default: auto-detect canvas)"
    echo "    -t, --text <TEXT>       Text content (default: \"New Text\")"
    echo "    -s, --size <SIZE>       Font size (default: 14)"
    echo "    -w, --width <WIDTH>     Text width (default: 200)"
    echo "    --height <HEIGHT>       Text height (default: 50)"
    echo "    -a, --anchor <ANCHOR>   Anchor preset (default: MiddleCenter)"
    echo "    --help                  Show this help message"
    echo ""
    echo "ANCHOR PRESETS:"
    echo "    TopLeft, TopCenter, TopRight"
    echo "    MiddleLeft, MiddleCenter, MiddleRight"
    echo "    BottomLeft, BottomCenter, BottomRight"
    echo ""
    echo "EXAMPLES:"
    echo "    vibe-unity add-text HeaderText"
    echo "    vibe-unity add-text HeaderText --parent MenuPanel --text \"Welcome!\" --size 24"
    echo "    vibe-unity add-text ScoreText -p GamePanel -t \"Score: 0\" -s 16 --anchor TopRight"
}

# Show help for add-canvas command  
show_add_canvas_help() {
    echo "Add canvas to the currently active Unity scene"
    echo ""
    echo "USAGE:"
    echo "    vibe-unity add-canvas <CANVAS_NAME> [OPTIONS]"
    echo ""
    echo "ARGUMENTS:"
    echo "    <CANVAS_NAME>    Name for the canvas GameObject"
    echo ""
    echo "OPTIONS:"
    echo "    -m, --mode <MODE>       Render mode (default: ScreenSpaceOverlay)"
    echo "    -w, --width <WIDTH>     Reference width (default: 1920)"
    echo "    -h, --height <HEIGHT>   Reference height (default: 1080)"
    echo "    -s, --scale <SCALE>     Scale mode (default: ScaleWithScreenSize)"
    echo "    --scene <SCENE>         Target scene name"
    echo "    --use-session           Use session defaults for unspecified parameters"
    echo "    --help                  Show this help message"
    echo ""
    echo "RENDER MODES:"
    echo "    ScreenSpaceOverlay      Canvas rendered on top of everything"
    echo "    ScreenSpaceCamera       Canvas rendered by specific camera"
    echo "    WorldSpace              Canvas positioned in world space"
    echo ""
    echo "SCALE MODES:"
    echo "    ConstantPixelSize       UI elements stay same pixel size"
    echo "    ScaleWithScreenSize     UI elements scale with screen size"
    echo "    ConstantPhysicalSize    UI elements stay same physical size"
    echo ""
    echo "EXAMPLES:"
    echo "    vibe-unity add-canvas MainCanvas"
    echo "    vibe-unity add-canvas UICanvas --mode ScreenSpaceOverlay --width 1920 --height 1080"
    echo "    vibe-unity add-canvas WorldCanvas -m WorldSpace"
}

# Create scene command
cmd_create_scene() {
    local scene_name=""
    local scene_path=""
    local scene_type="DefaultGameObjects"
    local add_to_build="false"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -t|--type)
                scene_type="$2"
                shift 2
                ;;
            -b|--build)
                add_to_build="true"
                shift
                ;;
            -h|--help)
                show_create_scene_help
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity create-scene --help' for usage information."
                exit 1
                ;;
            *)
                if [[ -z "$scene_name" ]]; then
                    scene_name="$1"
                elif [[ -z "$scene_path" ]]; then
                    scene_path="$1"
                else
                    echo "Error: Too many arguments"
                    echo "Use 'vibe-unity create-scene --help' for usage information."
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Validate required arguments
    if [[ -z "$scene_name" ]] || [[ -z "$scene_path" ]]; then
        echo "Error: Missing required arguments"
        echo "Use 'vibe-unity create-scene --help' for usage information."
        exit 1
    fi
    
    echo "Unity Vibe CLI - Creating Scene"
    echo "================================"
    echo "Scene Name: $scene_name"
    echo "Scene Path: $scene_path"
    echo "Scene Type: $scene_type"
    echo "Add to Build: $add_to_build"
    echo "Project Path: $(get_project_path)"
    echo ""
    
    # Use centralized execute_unity_command function that handles Unity detection
    execute_unity_command "UnityVibe.Editor.CLI.CreateSceneFromCommandLine" "$scene_name" "$scene_path" "$scene_type" "$add_to_build"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo ""
        echo "‚úÖ Scene created successfully: $scene_path/$scene_name.unity"
    else
        echo ""
        echo "‚ùå Failed to create scene"
        # Error details are now handled by execute_unity_command
        exit 1
    fi
}

# List types command
cmd_list_types() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "List available scene types for your Unity installation"
                echo ""
                echo "USAGE:"
                echo "    vibe-unity list-types"
                echo ""
                echo "This command shows all scene types available in your current Unity installation,"
                echo "including render pipeline specific types if installed."
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity list-types --help' for usage information."
                exit 1
                ;;
            *)
                echo "Error: Unexpected argument $1"
                echo "Use 'vibe-unity list-types --help' for usage information."
                exit 1
                ;;
        esac
    done
    
    echo "Unity Vibe CLI - Available Scene Types"
    echo "======================================"
    echo "Project Path: $(get_project_path)"
    echo ""
    
    execute_unity_command "UnityVibe.Editor.CLI.ListSceneTypesFromCommandLine"
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ Scene types listed successfully"
    else
        echo ""
        echo "‚ùå Failed to list scene types"
        exit 1
    fi
}

# Add canvas command
cmd_add_canvas() {
    local canvas_name=""
    local scene_name=""
    local render_mode="ScreenSpaceOverlay"
    local width="1920"
    local height="1080"
    local scale_mode="ScaleWithScreenSize"
    local use_session=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -m|--mode)
                render_mode="$2"
                shift 2
                ;;
            --scene)
                scene_name="$2"
                shift 2
                ;;
            -w|--width)
                width="$2"
                shift 2
                ;;
            --height)
                height="$2"
                shift 2
                ;;
            -s|--scale)
                scale_mode="$2"
                shift 2
                ;;
            --use-session)
                use_session=true
                shift
                ;;
            -h|--help)
                show_add_canvas_help
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity add-canvas --help' for usage information."
                exit 1
                ;;
            *)
                if [[ -z "$canvas_name" ]]; then
                    canvas_name="$1"
                else
                    echo "Error: Too many arguments"
                    echo "Use 'vibe-unity add-canvas --help' for usage information."
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Apply session defaults if requested
    if [[ "$use_session" == "true" ]]; then
        if has_session; then
            # Use session values as defaults, but allow command-line overrides
            [[ -z "$scene_name" ]] && scene_name=$(read_session "scene" "")
            [[ "$render_mode" == "ScreenSpaceOverlay" ]] && render_mode=$(read_session "canvas_mode" "ScreenSpaceOverlay")
            
            # Parse resolution from session
            local session_resolution=$(read_session "resolution" "1920x1080")
            if [[ "$width" == "1920" && "$height" == "1080" && "$session_resolution" != "1920x1080" ]]; then
                width=$(echo "$session_resolution" | cut -d'x' -f1)
                height=$(echo "$session_resolution" | cut -d'x' -f2)
            fi
            
            echo "üìÅ Using session defaults"
        else
            echo "‚ö†Ô∏è  No active session found. Use 'vibe-unity start-session' to create one."
        fi
    fi
    
    # Validate required arguments
    if [[ -z "$canvas_name" ]]; then
        echo "Error: Missing required canvas name"
        echo "Use 'vibe-unity add-canvas --help' for usage information."
        exit 1
    fi
    
    echo "Unity Vibe CLI - Adding Canvas"
    echo "=============================="
    echo "Canvas Name: $canvas_name"
    echo "Scene: ${scene_name:-"current"}"
    echo "Render Mode: $render_mode"
    echo "Resolution: ${width}x${height}"
    echo "Scale Mode: $scale_mode"
    echo "Project Path: $(get_project_path)"
    echo ""
    
    # Use centralized execute_unity_command function that handles Unity detection
    execute_unity_command "UnityVibe.Editor.CLI.AddCanvasFromCommandLine" "$canvas_name" "$scene_name" "$render_mode" "$width" "$height" "$scale_mode"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo ""
        echo "‚úÖ Canvas added successfully: $canvas_name"
    else
        echo ""
        echo "‚ùå Failed to add canvas"
        exit 1
    fi
}

# Add panel command
cmd_add_panel() {
    local panel_name=""
    local parent_name=""
    local scene_name=""
    local width="200"
    local height="200"
    local anchor_preset="MiddleCenter"
    local use_session=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--parent)
                parent_name="$2"
                shift 2
                ;;
            -s|--scene)
                scene_name="$2"
                shift 2
                ;;
            -w|--width)
                width="$2"
                shift 2
                ;;
            --height)
                height="$2"
                shift 2
                ;;
            -a|--anchor)
                anchor_preset="$2"
                shift 2
                ;;
            --use-session)
                use_session=true
                shift
                ;;
            -h|--help)
                show_add_panel_help
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity add-panel --help' for usage information."
                exit 1
                ;;
            *)
                if [[ -z "$panel_name" ]]; then
                    panel_name="$1"
                else
                    echo "Error: Too many arguments"
                    echo "Use 'vibe-unity add-panel --help' for usage information."
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Apply session defaults if requested
    if [[ "$use_session" == "true" ]]; then
        if has_session; then
            # Use session values as defaults, but allow command-line overrides
            [[ -z "$scene_name" ]] && scene_name=$(read_session "scene" "")
            [[ -z "$parent_name" ]] && parent_name=$(read_session "parent" "")
            
            echo "üìÅ Using session defaults"
        else
            echo "‚ö†Ô∏è  No active session found. Use 'vibe-unity start-session' to create one."
        fi
    fi
    
    # Validate required arguments
    if [[ -z "$panel_name" ]]; then
        echo "Error: Missing required panel name"
        echo "Use 'vibe-unity add-panel --help' for usage information."
        exit 1
    fi
    
    echo "Unity Vibe CLI - Adding Panel"
    echo "============================="
    echo "Panel Name: $panel_name"
    echo "Parent: ${parent_name:-"auto-detect"}"
    echo "Scene: ${scene_name:-"current"}"
    echo "Size: ${width}x${height}"
    echo "Anchor: $anchor_preset"
    echo "Project Path: $(get_project_path)"
    echo ""
    
    # Use centralized execute_unity_command function that handles Unity detection
    execute_unity_command "UnityVibe.Editor.CLI.AddPanelFromCommandLine" "$panel_name" "$parent_name" "$scene_name" "$width" "$height" "$anchor_preset"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo ""
        echo "‚úÖ Panel added successfully: $panel_name"
    else
        echo ""
        echo "‚ùå Failed to add panel"
        exit 1
    fi
}

# Add button command
cmd_add_button() {
    local button_name=""
    local parent_name=""
    local button_text="Button"
    local width="160"
    local height="30"
    local anchor_preset="MiddleCenter"
    local use_session=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--parent)
                parent_name="$2"
                shift 2
                ;;
            -t|--text)
                button_text="$2"
                shift 2
                ;;
            -w|--width)
                width="$2"
                shift 2
                ;;
            --height)
                height="$2"
                shift 2
                ;;
            -a|--anchor)
                anchor_preset="$2"
                shift 2
                ;;
            --use-session)
                use_session=true
                shift
                ;;
            -h|--help)
                show_add_button_help
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity add-button --help' for usage information."
                exit 1
                ;;
            *)
                if [[ -z "$button_name" ]]; then
                    button_name="$1"
                else
                    echo "Error: Too many arguments"
                    echo "Use 'vibe-unity add-button --help' for usage information."
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Apply session defaults if requested
    if [[ "$use_session" == "true" ]]; then
        if has_session; then
            [[ -z "$parent_name" ]] && parent_name=$(read_session "parent" "")
            echo "üìÅ Using session defaults"
        else
            echo "‚ö†Ô∏è  No active session found. Use 'vibe-unity start-session' to create one."
        fi
    fi
    
    # Validate required arguments
    if [[ -z "$button_name" ]]; then
        echo "Error: Missing required button name"
        echo "Use 'vibe-unity add-button --help' for usage information."
        exit 1
    fi
    
    echo "Unity Vibe CLI - Adding Button"
    echo "=============================="
    echo "Button Name: $button_name"
    echo "Parent: ${parent_name:-"auto-detect"}"
    echo "Text: \"$button_text\""
    echo "Size: ${width}x${height}"
    echo "Anchor: $anchor_preset"
    echo "Project Path: $(get_project_path)"
    echo ""
    
    # Use centralized execute_unity_command function that handles Unity detection
    execute_unity_command "UnityVibe.Editor.CLI.AddButtonFromCommandLine" "$button_name" "$parent_name" "$button_text" "$width" "$height" "$anchor_preset"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo ""
        echo "‚úÖ Button added successfully: $button_name"
    else
        echo ""
        echo "‚ùå Failed to add button"
        exit 1
    fi
}

# Add text command
cmd_add_text() {
    local text_name=""
    local parent_name=""
    local text_content="New Text"
    local font_size="14"
    local width="200"
    local height="50"
    local anchor_preset="MiddleCenter"
    local use_session=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--parent)
                parent_name="$2"
                shift 2
                ;;
            -t|--text)
                text_content="$2"
                shift 2
                ;;
            -s|--size)
                font_size="$2"
                shift 2
                ;;
            -w|--width)
                width="$2"
                shift 2
                ;;
            --height)
                height="$2"
                shift 2
                ;;
            -a|--anchor)
                anchor_preset="$2"
                shift 2
                ;;
            --use-session)
                use_session=true
                shift
                ;;
            -h|--help)
                show_add_text_help
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity add-text --help' for usage information."
                exit 1
                ;;
            *)
                if [[ -z "$text_name" ]]; then
                    text_name="$1"
                else
                    echo "Error: Too many arguments"
                    echo "Use 'vibe-unity add-text --help' for usage information."
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Apply session defaults if requested
    if [[ "$use_session" == "true" ]]; then
        if has_session; then
            [[ -z "$parent_name" ]] && parent_name=$(read_session "parent" "")
            echo "üìÅ Using session defaults"
        else
            echo "‚ö†Ô∏è  No active session found. Use 'vibe-unity start-session' to create one."
        fi
    fi
    
    # Validate required arguments
    if [[ -z "$text_name" ]]; then
        echo "Error: Missing required text name"
        echo "Use 'vibe-unity add-text --help' for usage information."
        exit 1
    fi
    
    echo "Unity Vibe CLI - Adding Text"
    echo "============================"
    echo "Text Name: $text_name"
    echo "Parent: ${parent_name:-"auto-detect"}"
    echo "Content: \"$text_content\""
    echo "Font Size: ${font_size}px"
    echo "Size: ${width}x${height}"
    echo "Anchor: $anchor_preset"
    echo "Project Path: $(get_project_path)"
    echo ""
    
    # Use centralized execute_unity_command function that handles Unity detection
    execute_unity_command "UnityVibe.Editor.CLI.AddTextFromCommandLine" "$text_name" "$parent_name" "$text_content" "$font_size" "$width" "$height" "$anchor_preset"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo ""
        echo "‚úÖ Text added successfully: $text_name"
    else
        echo ""
        echo "‚ùå Failed to add text"
        exit 1
    fi
}

# Check Unity process status
cmd_check_unity() {
    echo "Unity Vibe CLI - Process Status Check"
    echo "====================================="
    
    # Check for Unity processes
    echo "Checking Unity processes..."
    if command -v powershell.exe &> /dev/null; then
        echo ""
        echo "Windows Unity Processes:"
        powershell.exe "Get-Process | Where-Object {\$_.ProcessName -like '*Unity*'} | Select-Object ProcessName,Id,StartTime | Format-Table -AutoSize" 2>/dev/null || echo "No Unity processes found or PowerShell unavailable"
    fi
    
    # Check Unity Hub
    echo ""
    echo "Unity Hub Process:"
    if command -v powershell.exe &> /dev/null; then
        powershell.exe "Get-Process | Where-Object {\$_.ProcessName -like '*Unity Hub*'} | Select-Object ProcessName,Id,StartTime | Format-Table -AutoSize" 2>/dev/null || echo "Unity Hub not running"
    fi
    
    # Check project files
    echo ""
    echo "Project Status:"
    echo "Project Path: $(get_project_path)"
    
    if [[ -d "Library" ]]; then
        echo "‚úÖ Unity Library folder exists"
    else
        echo "‚ùå Unity Library folder missing (project may not be initialized)"
    fi
    
    if [[ -d "Assets" ]]; then
        echo "‚úÖ Assets folder exists"
    else
        echo "‚ùå Assets folder missing"
    fi
    
    # Check for common lock indicators
    echo ""
    echo "Lock File Status:"
    local lock_files_found=false
    
    if [[ -f "Temp/UnityLockfile" ]]; then
        echo "‚ö†Ô∏è  Unity lock file found: Temp/UnityLockfile"
        lock_files_found=true
    fi
    
    if [[ -d "Temp" ]]; then
        local temp_files=$(find Temp -name "*.tmp" -o -name "*.lock" 2>/dev/null | wc -l)
        if [[ $temp_files -gt 0 ]]; then
            echo "‚ö†Ô∏è  $temp_files temporary/lock files found in Temp/"
            lock_files_found=true
        fi
    fi
    
    if [[ "$lock_files_found" == "false" ]]; then
        echo "‚úÖ No Unity lock files detected"
    fi
    
    echo ""
    echo "Unity Installation:"
    echo "Unity Path: $UNITY_PATH"
    if [[ -f "$UNITY_PATH" ]]; then
        echo "‚úÖ Unity executable found"
    else
        echo "‚ùå Unity executable not found at expected path"
    fi
}

# Kill Unity processes
cmd_kill_unity() {
    echo "Unity Vibe CLI - Kill Unity Processes"
    echo "====================================="
    echo "‚ö†Ô∏è  WARNING: This will forcefully terminate Unity processes!"
    echo ""
    
    local force=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--force)
                force=true
                shift
                ;;
            -h|--help)
                echo "Kill Unity processes that may be blocking CLI operations"
                echo ""
                echo "USAGE:"
                echo "    vibe-unity kill-unity [OPTIONS]"
                echo ""  
                echo "OPTIONS:"
                echo "    -f, --force    Skip confirmation prompt"
                echo "    -h, --help     Show this help message"
                echo ""
                echo "‚ö†Ô∏è  WARNING: Use with caution! This will forcefully terminate Unity processes."
                exit 0
                ;;
            *)
                echo "Error: Unknown argument $1"
                echo "Use 'vibe-unity kill-unity --help' for usage information."
                exit 1
                ;;
        esac
    done
    
    if [[ "$force" != "true" ]]; then
        echo "Are you sure you want to kill Unity processes? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "Operation cancelled."
            exit 0
        fi
    fi
    
    echo ""
    echo "Killing Unity processes..."
    
    if command -v powershell.exe &> /dev/null; then
        # Kill Unity Editor processes
        powershell.exe "Get-Process | Where-Object {\$_.ProcessName -like '*Unity*'} | Stop-Process -Force" 2>/dev/null
        echo "‚úÖ Unity Editor processes terminated"
        
        # Kill Unity Hub processes
        powershell.exe "Get-Process | Where-Object {\$_.ProcessName -like '*Unity Hub*'} | Stop-Process -Force" 2>/dev/null
        echo "‚úÖ Unity Hub processes terminated"
        
        # Clean up lock files
        if [[ -f "Temp/UnityLockfile" ]]; then
            rm -f "Temp/UnityLockfile"
            echo "‚úÖ Removed Unity lock file"
        fi
        
        # Clean up temp files
        if [[ -d "Temp" ]]; then
            find Temp -name "*.tmp" -o -name "*.lock" -delete 2>/dev/null
            echo "‚úÖ Cleaned temporary files"
        fi
        
        echo ""
        echo "‚úÖ Unity processes killed and lock files cleaned"
        echo "You should now be able to use Unity CLI commands."
    else
        echo "‚ùå PowerShell not available - cannot kill Windows processes"
        exit 1
    fi
}

# Start session command
cmd_start_session() {
    local scene_name=""
    local canvas_mode="ScreenSpaceOverlay"
    local resolution="1920x1080"
    local parent=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s|--scene)
                scene_name="$2"
                shift 2
                ;;
            -m|--canvas-mode)
                canvas_mode="$2"
                shift 2
                ;;
            -r|--resolution)
                resolution="$2"
                shift 2
                ;;
            -p|--parent)
                parent="$2"
                shift 2
                ;;
            -h|--help)
                echo "Start a new Unity Vibe CLI session with default parameters"
                echo ""
                echo "USAGE:"
                echo "    vibe-unity start-session [OPTIONS]"
                echo ""
                echo "OPTIONS:"
                echo "    -s, --scene <SCENE>           Set default scene name"
                echo "    -m, --canvas-mode <MODE>      Set default canvas mode (default: ScreenSpaceOverlay)"
                echo "    -r, --resolution <WIDTHxHEIGHT> Set default resolution (default: 1920x1080)"
                echo "    -p, --parent <PARENT>         Set default parent GameObject for UI elements"
                echo "    -h, --help                    Show this help message"
                echo ""
                echo "EXAMPLES:"
                echo "    vibe-unity start-session --scene MyGameScene"
                echo "    vibe-unity start-session -s GameScene -m ScreenSpaceOverlay -r 1920x1080"
                echo "    vibe-unity start-session --scene UIScene --parent MainCanvas"
                echo "    vibe-unity start-session --scene GameScene --parent MenuPanel  # For UI elements"
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity start-session --help' for usage information."
                exit 1
                ;;
            *)
                echo "Error: Unexpected argument $1"
                echo "Use 'vibe-unity start-session --help' for usage information."
                exit 1
                ;;
        esac
    done
    
    echo "Unity Vibe CLI - Starting Session"
    echo "=================================="
    
    # Clear any existing session
    if has_session; then
        echo "‚ö†Ô∏è  Clearing existing session..."
        rm -f "$SESSION_FILE"
    fi
    
    # Set session parameters
    if [[ -n "$scene_name" ]]; then
        write_session "scene" "$scene_name"
        echo "‚úÖ Default scene: $scene_name"
    fi
    
    write_session "canvas_mode" "$canvas_mode"
    echo "‚úÖ Default canvas mode: $canvas_mode"
    
    write_session "resolution" "$resolution"
    echo "‚úÖ Default resolution: $resolution"
    
    if [[ -n "$parent" ]]; then
        write_session "parent" "$parent"
        echo "‚úÖ Default parent: $parent"
    fi
    
    write_session "created" "$(date)"
    
    echo ""
    echo "üéâ Session started successfully!"
    echo "Use --use-session flag with commands to use these defaults."
}

# Show session command
cmd_show_session() {
    if ! has_session; then
        echo "‚ÑπÔ∏è  No active session. Use 'vibe-unity start-session' to create one."
        exit 0
    fi
    
    echo "Unity Vibe CLI - Current Session"
    echo "================================="
    echo "Session file: $SESSION_FILE"
    echo ""
    
    local scene=$(read_session "scene" "")
    local canvas_mode=$(read_session "canvas_mode" "")
    local resolution=$(read_session "resolution" "")
    local parent=$(read_session "parent" "")
    local created=$(read_session "created" "")
    
    [[ -n "$scene" ]] && echo "Default scene: $scene"
    [[ -n "$canvas_mode" ]] && echo "Default canvas mode: $canvas_mode"
    [[ -n "$resolution" ]] && echo "Default resolution: $resolution"
    [[ -n "$parent" ]] && echo "Default parent: $parent"
    [[ -n "$created" ]] && echo "Created: $created"
    
    echo ""
    echo "Use --use-session flag with commands to use these defaults."
}

# Set parent command
cmd_set_parent() {
    local parent=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                echo "Update the default parent GameObject in current session"
                echo ""
                echo "USAGE:"
                echo "    vibe-unity set-parent <PARENT_NAME>"
                echo ""
                echo "ARGUMENTS:"
                echo "    <PARENT_NAME>    Name of the parent GameObject to set as default"
                echo ""
                echo "EXAMPLES:"
                echo "    vibe-unity set-parent MainCanvas      # Set canvas as parent"
                echo "    vibe-unity set-parent MenuPanel       # Set panel as parent for buttons/text"
                echo "    vibe-unity set-parent \"\"               # Clear parent (use auto-detection)"
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1"
                echo "Use 'vibe-unity set-parent --help' for usage information."
                exit 1
                ;;
            *)
                if [[ -z "$parent" ]]; then
                    parent="$1"
                else
                    echo "Error: Too many arguments"
                    echo "Use 'vibe-unity set-parent --help' for usage information."
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [[ -z "$parent" ]]; then
        echo "Error: Missing required parent name"
        echo "Use 'vibe-unity set-parent --help' for usage information."
        exit 1
    fi
    
    if ! has_session; then
        echo "‚ö†Ô∏è  No active session found. Use 'vibe-unity start-session' to create one."
        exit 1
    fi
    
    echo "Unity Vibe CLI - Set Parent"
    echo "==========================="
    
    if [[ -n "$parent" ]]; then
        write_session "parent" "$parent"
        echo "‚úÖ Updated default parent: $parent"
    else
        # Remove parent from session
        if [[ -f "$SESSION_FILE" ]]; then
            sed -i "/^parent=/d" "$SESSION_FILE"
        fi
        echo "‚úÖ Cleared default parent (will use auto-detection)"
    fi
}

# Clear session command
cmd_clear_session() {
    echo "Unity Vibe CLI - Clear Session"
    echo "=============================="
    clear_session_file
}

# Help command
cmd_help() {
    if [[ $# -eq 0 ]]; then
        show_help
        return
    fi
    
    case $1 in
        create-scene)
            show_create_scene_help
            ;;
        add-canvas)
            show_add_canvas_help
            ;;
        add-panel)
            show_add_panel_help
            ;;
        add-button)
            show_add_button_help
            ;;
        add-text)
            show_add_text_help
            ;;
        list-types)
            echo "List available scene types for your Unity installation"
            echo ""
            echo "USAGE:"
            echo "    vibe-unity list-types"
            echo ""
            echo "This command shows all scene types available in your current Unity installation."
            ;;
        check-unity)
            echo "Check Unity process status and project locks"
            echo ""
            echo "USAGE:"
            echo "    vibe-unity check-unity"
            echo ""
            echo "This command checks for running Unity processes, project lock files,"
            echo "and provides diagnostic information for troubleshooting CLI issues."
            ;;
        kill-unity)
            echo "Kill Unity processes that may be blocking CLI operations"
            echo ""
            echo "USAGE:"
            echo "    vibe-unity kill-unity [OPTIONS]"
            echo ""
            echo "OPTIONS:"
            echo "    -f, --force    Skip confirmation prompt"
            echo ""
            echo "‚ö†Ô∏è  WARNING: Use with caution! This will forcefully terminate Unity processes."
            ;;
        help)
            echo "Show help information for Unity Vibe CLI commands"
            echo ""
            echo "USAGE:"
            echo "    vibe-unity help [COMMAND]"
            echo ""
            echo "If no command is specified, shows general help."
            ;;
        *)
            echo "Error: Unknown command '$1'"
            echo "Use 'vibe-unity help' to see available commands."
            exit 1
            ;;
    esac
}

# Main command dispatcher
main() {
    # Check for no arguments
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    # Handle global flags
    case $1 in
        -v|--version)
            show_version
            exit 0
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
    esac
    
    # Handle commands
    local command="$1"
    shift
    
    case $command in
        create-scene)
            cmd_create_scene "$@"
            ;;
        list-types)
            cmd_list_types "$@"
            ;;
        add-canvas)
            cmd_add_canvas "$@"
            ;;
        add-panel)
            cmd_add_panel "$@"
            ;;
        add-button)
            cmd_add_button "$@"
            ;;
        add-text)
            cmd_add_text "$@"
            ;;
        start-session)
            cmd_start_session "$@"
            ;;
        show-session)
            cmd_show_session "$@"
            ;;
        set-parent)
            cmd_set_parent "$@"
            ;;
        clear-session)
            cmd_clear_session "$@"
            ;;
        check-unity)
            cmd_check_unity "$@"
            ;;
        kill-unity)
            cmd_kill_unity "$@"
            ;;
        help)
            cmd_help "$@"
            ;;
        *)
            echo "Error: Unknown command '$command'"
            echo "Use 'vibe-unity --help' to see available commands."
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"